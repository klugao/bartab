# Cursor Rule — BarTab (PDV Mesas/Contas)

## Contexto do Projeto

* Nome: **BarTab – Gestão de Contas/Mesas**.
* Objetivo: sistema simples para **abrir contas**, **adicionar/remover itens**, **fechar/pagar**, e **“pagar depois”** com controle de saldos.
* Stack: **Frontend React+TS + Tailwind + shadcn/ui**, **Backend NestJS**, **PostgreSQL**, **Yarn**. 
* Seguir: **KISS, YAGNI, DRY, SOLID, Clean Code**, **CI/CD**, documentação em **Wiki**. 

## Princípios de UX (obrigatórios)

* **Máximo de 3 cliques** para o fluxo principal: abrir conta → adicionar item → pagar/“pagar depois”. (conforme visão de simplicidade do RFC). 
* **Alvos de toque ≥ 48×48px**, espaçamento generoso, textos ≥ **16px** (preferir 18–20px em botões).
* **Contraste alto**, ícones + rótulos sempre (nada só por cor).
* **Layout responsivo** (mobile-first), **cards grandes** na home para contas abertas e botão fixo de **“Nova Conta”**.
* Evitar campos desnecessários: **nome do cliente** é suficiente para abrir conta (sem CPF/e-mail obrigatórios). 

## shadcn/ui + Tailwind (padrão de componentes)

* Usar **shadcn/ui** (Radix) para: `Button`, `Card`, `Dialog/Sheet`, `Input`, `Table`, `Badge`, `Toast`.
* **Tokens Tailwind**: aumentar `font-size`, `spacing` e `radius` padrão (`rounded-2xl`), `p-4` ou mais em áreas clicáveis.
* **Temas**: um único tema com alto contraste; desabilitar variações que prejudiquem legibilidade.
* **Estado vazio** sempre com CTAs claros (ex.: “Abrir nova conta”).

## Arquitetura (resumo assertivo)

* **Front**: React (TS), roteamento por **/ (home)**, **/conta/:id**, **/clientes**, **/itens**, **/dividas**.
* **Back**: NestJS (Controllers/Services/Repositories com TypeORM). Diagramas no RFC—C4 e componentes. 
* **Banco**: PostgreSQL; entidades: `Cliente`, `Conta`, `Item`, `Consumo`, `Pagamento`.
* **Autenticação & segurança**: proteger endpoints sensíveis, validação em ambas camadas. 

## Requisitos funcionais (o que precisa existir na UI)

* **RF01–RF05**: abrir/gerir contas, adicionar/remover itens, resumo e total, registro histórico.
* **RF06–RF10**: CRUD de itens e clientes, tela de **dívidas** (saldos negativos), **pagamentos parciais**, histórico de pagamentos.
* **“Pagar depois”**: somar ao saldo devedor do cliente e exibir na tela de **Dívidas** com opção de quitação/parcelas. 

## Fluxos obrigatórios (GUI)

1. **Home**

   * Grid de **Cards de Contas Abertas** (nome do cliente + resumo curto + total).
   * Botão **“Nova Conta”** (fixo no canto inferior direito em mobile).
2. **Detalhe da Conta (/conta/:id)**

   * Lista de itens consumidos, total, botões **“Adicionar Item”**, **“Pagar”**, **“Voltar”**.
3. **Pagamento (Dialog/Sheet)**

   * Opções: **Dinheiro, Débito, Crédito, Pix, Pagar depois**.
   * Em “Pagar depois”: atualizar saldo do cliente e registrar no histórico. 

## Convenções de código (Frontend)

* Linguagem: **TypeScript strict**.
* Pastas:

  ```
  src/
    app/(routes)/
    components/ui/   // wrappers de shadcn com props simplificadas e tamanho grande
    features/
      contas/ clientes/ itens/ pagamentos/ dividas/
    lib/ (api, zod, utils, formatadores)
  ```
* Componentes **presentational** em `components/` e **lógicos** por feature.
* **Formulários** com `react-hook-form + zod`.
* **Chamadas HTTP** via `fetch` encapsulado em `lib/api.ts` (erro padronizado + toasts).

## Geradores (o que quero quando peço código)

* **Quando eu pedir um componente de tela**, gere **React + TSX** usando **shadcn/ui**, **Tailwind** e já inclua:

  * Acessibilidade (aria-*), foco visível, teclas Enter/Espaço.
  * Tamanhos “grandes” (`size="lg"`, `className="h-12 text-lg px-6"` etc.).
  * Layout responsivo (stack em mobile, grid ≥ md).
  * Teste unitário básico (Vitest/RTL) para render e ações primárias.
* **Quando eu pedir CRUD** (clientes/itens):

  * Tabela com paginação simples, busca por nome, **ações grandes** (Editar/Excluir).
  * `Dialog` para criar/editar com validação zod.
* **Quando eu pedir o fluxo de pagamento**:

  * `Dialog` “Selecionar forma de pagamento” com 5 botões grandes (1 por linha em mobile).
  * Callback distinto para cada método; “Pagar depois” chama `POST /pagamentos/pending`.

## Exemplos de prompts internos (use como padrão)

* **Home (cards de contas)**:
  “Crie `HomePage` com grid de `Card` (shadcn) 2 colunas em sm, 3 em md+, cada card mostra: nome do cliente (xl/bold), 2–3 itens mais recentes em `Badge` e total em destaque. Botão flutuante `Nova Conta` (`Button` circular lg).”
* **Detalhe da conta**:
  “Crie `ContaPage` com lista de itens (tabela simples), total grande fixo no rodapé, `Button` primário `Pagar`, secundário `Voltar`, e `Button` `Adicionar item` no header.”
* **Pagamento**:
  “Crie `PagamentoDialog` com 5 `Button` grandes (Dinheiro/Débito/Crédito/Pix/Pagar depois). Em `Pagar depois`, chamar `api.pagamentos.pendenciar(contaId)` e fechar com toast de sucesso.”
* **Dívidas**:
  “Crie `DividasPage` listando clientes com saldo < 0, ordenado por maior débito, ação `Registrar pagamento` (parcial/total) em `Dialog`.”

## Qualidade, Processo e Entrega

* **CI/CD obrigatório**; testes **TDD** (mínimos: unit + smoke + integração). 
* **Kanban/Issues** no GitHub Projects com entregas iterativas (Portfólio I/II). 
* **Wiki** do repositório como documentação viva (incluir diagramas C4 do RFC).  
* Preparar **apresentação e coleta de assinaturas de 3 professores** conforme aprovação de tema. 

## Checklist por tela (para a IA seguir antes de finalizar)

* [ ] Responsivo testado (320px, 768px, 1024px).
* [ ] Alvos ≥ 48px, textos legíveis, contraste OK.
* [ ] Fluxo em ≤ 3 cliques para ação principal.
* [ ] Estados: carregando, vazio, erro, sucesso (toast).
* [ ] Acessibilidade: aria-labels, ordem de tab, foco visível.
* [ ] Teste RTL simples cobrindo ação principal.

## Endpoints esperados (contratos altos níveis)

* `GET /contas` (cards da home), `POST /contas` (nova).
* `GET /contas/:id`, `POST /contas/:id/itens`, `DELETE /contas/:id/itens/:itemId`.
* `POST /contas/:id/pagamentos` (dinheiro|debito|credito|pix).
* `POST /contas/:id/pagamentos/pending` (**pagar depois**).
* `GET /dividas`, `POST /dividas/:clienteId/quitar` (parcial/total).
* `CRUD /clientes`, `CRUD /itens`. 